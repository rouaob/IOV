# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod  # pour heritage
import matplotlib.pyplot as plt      # pour visualization ?
import csv
import time

###############################################################################

# Variables globales

FILE = None
TI = 1

###############################################################################

# libraries
import math as m
import time

###############################################################################


def state(vi):
    # tnajjam t7ott el fonction hedhi fl class
    pass  # vi.state = ND ?? , initiallement le satute d'un Vi est ND


def Receive(msg):
    # ma 7ajtekch normalement
    return msg


def Get_position(Pv):
    # tnajjam t7ott el fonction hedhi fl class
    pass


def Get_speed(Sv):
    # tnajjam t7ott el fonction hedhi fl class
    pass


def Calculate_Density_value(vi):
    # nombre de liens / voisins
    dvi = len(vi.neighborhood)

    # nombre de liens du cluster
    e = 0
    visited_nodes = {vi}
    for v in vi.neighborhood:
        for v_ in v.neighborhood:
            e += (v_ not in visited_nodes)

        visited_node.add(v)

    # calcul metrique de densite
    return e / dvi + 1


def Calculate_Position_value(vi):
    # calcul position moyenne
    n, x_mean, y_mean = 0, 0, 0
    for v in vi.neighborhood:
        x += v.x
        y += v.y
        n += 1

    x_mean, y_mean = x_mean / n, y_mean / n

    # calcul distance de noeud la plus eloignee de la position moyenne
    x_max, y_max = 0, 0
    dist_vi = distance(vi.x, vi.y, x_mean, y_mean)
    dist_max = dist_vi
    for v in vi.neighborhood:
        dist_now = distance(v.x, v.y, x_mean, y_mean)
        if dist_max < dist_now:
            dist_max = dist_now

    # calcul metrique de position
    return dist_vi / dist_max


def distance(x1, y1, x2, y2):
    # distance euclidienne
    return m.sqrt((x1-x2)**2 + (y1-y2)**2)


def Calculate_Mobility_value(vi):
    # mise a jour de la vitesse moyenne exponentielle
    vi.S = (1 - alpha) * vi.S + alpha * vi.V

    # VME maximale parmi les voisins
    S_max = 0
    for v in vi.neighborhood:
        S_max = max(S_max, v.S)
        u += v.S
    u = u / len(vi.neighborhood)

    # calcul metrique de mobilite
    return abs(vi.S - u) / (S_max - u)


def Calculate_Delay_value(vi):
    pass  # ???


def Calculate_Weight_value_W(vi):
    pass  # voir ligne 138 et adapter


def update_neighborhood(tab):
    pass  # ???


def send(weight_val):
    # ma 7ajtekch normalement
    #neighbors = 55
    #for i in neighbors:
        # print(message)


def brodcast_k_voisin():
    # ???
    for Vi in Vehicule:
        pass  # send Ch_elect msg


def weight_val_compair():
    # ???
    for x in range(10):
        pass


class Vehicule:
    # ken t7b tabba3 chktbt ena fl code kelli b3aththou lek. copier coller
    # kenek be5la chweyya ^^
    # ebda nadham el code bin el main w fichier class a3tih ay essem w ektb fl
    # main :
    #   from ay_essem_ta3_fichier_illi_fih_el_class import Vehicule
    pass


######################################
# Algo 1 Node_initial_status(vi)
#####################################

# Ti: temps d'expiration

# state(vi) = ND
# Receive(Hello)
# Get_position(Pv)
# Get_speed(Sv)

vi.state = 'ND'
vi.Receive(Hello)
vi.Get_position()
vi.Get_speed()


# while Ti > 0:
ini, Ti = time.time(), 1  # en secondes
while time.time() - ini < Ti:
    Dvi = Calculate_Density_value(vi)
    Mvi = Calculate_Mobility_value(vi)
    Pvi = Calculate_Position_value(vi)
    DEvi = Calculate_Delay_value(vi)

    weight_val = 0
    for w, m in zip([0.25, 0.25, 0.25, 0.25], [Dvi, Mvi, Pvi, DEvi]):
        weight_val += w * m

    # Calculate_Weight_value_W(vi)
    vi.set_weight(weight_val)
    update_neighborhood(tab)
    send(weight_val)

###############################################################################
class Vehicule(ABC):
    table = []
    w = [0.25, 0.25, 0.25, 0.25]  # facteurs de ponderation de la metrique

    def __init__(self, row):
        # attributs vierges
        self.voisins: set = {}  # aucun voisin au depart
        self.statut = 'ND'
        self.poids = float('inf')
        self.param = {'Dv': 0, 'Mv': 0, 'Pv': 0, 'EDv': 0}  # parametres poids
        self.sous_param: dict[str] = {}  # TODO sous-parametres calcul poids

        # attributs initialises
        self.id = int(row['id'])
        self.position = (float(row['x']), float(row['y']))  # TODO a renommer
        self.vitesse = (float(row['u']), float(row['v']))  # TODO a renommer

        # ajout du vehicule dans la table
        Vehicule.table.append(self)

    ###

    def calculer_poids(self):
        self.mettre_a_jour_parametres()
        self.poids = sum(wi * pi for wi, pi in zip(Vehicule.w, self.param))

    def envoyer_message(self, msg_type):
        if msg_type == 'hello':
            pass  # TODO

        elif msg_type == 'weight_val':
            pass  # TODO

        elif msg_type == 'CH_elect':
            pass  # TODO

        elif msg_type == 'join_request':
            pass  # TODO

        elif msg_type == 'join_accept':
            pass  # TODO

        else:
            raise Exception(f"Aucun message de ce type: {msg_type}")

    def mettre_a_jour_parametres(self):
        depart = time.time()  # depart chronometre
        
        # boucle avec TI, toujours pas compris, sry
        # while time.time() - depart < TI:
            # ...
            # trouver voisins
            # faire quelque chose avec voisins
            # mettre a jour parametres
            # mettre a jour voisins : self.voisins.update()

        pass  # TODO

    def recevoir_message(self):
        pass  # ???

    #######################################################################

    # getters et setters

    def get_id(self):
        return self.id

    def get_position(self):
        return self.position

    def get_statut(self):
        return self.statut

    def get_vitesse(self):
        return self.vitesse

    ###

    def set_position(self, p: tuple[float, float]):
        self.position = p

    def set_statut(self, s: str):
        if s not in {'ND', 'CH', 'passerelle', 'CMN', 'MMN'}:
            # send error to stderr and stops program
            raise Exception(f"Aucun statut appelÃ© '{s}'.")
        self.statut = s

    def set_vitesse(self, v: tuple[float, float]):
        self.vitesse = v

###############################################################################


if __name__ == '__main__':

    # phase initiale 1 : declarer les vehicules
    with open(FILE, newline='') as csvfile:
        parsedfile = csv.DictReader(csvfile, delimiter=',')
        for row in parsedfile:
            Vehicule(row)

    for v in Vehicule.table:
        # phase initiale 2 : parametrer les vehicules
        v.calculer_poids()

        # phase initiale 3 : informer les voisins
        v.envoyer_message('weight_val')
